{"version":3,"sources":["components/Card/Card.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Card","value","id","flipped","selected","handleClick","className","onClick","Game","useState","currentlySelected","setCurrentlySelected","setFlipped","cards","setCards","createCards","i","push","sort","Math","random","useEffect","length","setTimeout","onClickHandler","some","val","map","card","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAwBeA,EArBF,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,MAAMC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YAMxC,OACI,mCACCF,EACD,qBAAKG,UAAU,yBAAf,SACI,6BAAKL,MAET,qBAAK,cAAa,MAAOM,QAAS,WATlCF,EAAY,CAACJ,EAAMC,KASqCI,UAAS,yBAAoBF,EAAW,kBAAoB,IAApH,SACKA,EACD,6BAAKH,IACL,wCCmDGO,G,MAjEF,WACT,MAAkDC,mBAAS,IAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KACA,EAA8BF,mBAAS,IAAvC,mBAAON,EAAP,KAAgBS,EAAhB,KACA,EAA0BH,mBAAS,IAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAGMC,EAAa,WAEf,IADA,IAAIF,EAAQ,GACJG,EAAE,EAAEA,EAAE,GAAGA,IACbH,EAAMI,KAAK,CAAChB,MAAMe,IAItB,OAFAH,EAAQ,sBAAIA,GAAJ,YAAcA,IAAOK,MAAK,kBAAKC,KAAKC,SAAW,MACvDN,EAASD,GACFA,GAGXQ,qBAAU,WACNN,MACF,IAGFM,qBAAU,WACwB,IAA3BX,EAAkBY,SACdZ,EAAkB,GAAG,KAAOA,EAAkB,GAAG,IAAMA,EAAkB,GAAG,KAAOA,EAAkB,GAAG,IACvGE,EAAW,GAAD,mBAAKT,GAAL,CAAaO,EAAkB,GAAG,GAAGA,EAAkB,GAAG,MACpEC,EAAqB,KAGrBY,YAAW,WACPZ,EAAqB,MACtB,QAKb,CAACD,EAAkBP,IAIrB,IAAMqB,EAAiB,SAACvB,IAClBS,EAAkBe,MAAK,SAAAC,GAAO,OAAOA,EAAI,KAAKzB,EAAM,OAASS,EAAkBY,OAAO,EAAIX,EAAqB,GAAD,mBAAKD,GAAL,CAAwBT,KAAUU,EAAqBD,IAW3K,OACI,qBAAKJ,UAAU,iBAAf,SACI,qBAAKA,UAAU,iBAAf,SACKH,EAAQmB,SAAST,EAAMS,QAAyB,IAAfT,EAAMS,OACxC,sBAAKhB,UAAU,aAAf,UACA,2CACI,wBAAQC,QAAS,WAb7BQ,IACAH,EAAW,IACXD,EAAqB,KAWT,sBAENE,EAAMc,KAAI,SAACC,EAAM1B,GAAP,OAAc,cAAC,EAAD,CAAMD,MAAO2B,EAAK3B,MAAgBC,GAAIA,EAAI,cAAY,IAAIG,YAAamB,EAAgBpB,SAAUM,EAAkBe,MAAK,SAAAC,GAAO,OAAOA,EAAI,KAAKxB,KAAMC,QAASA,EAAQ0B,SAAS3B,IAAjJA,YCtDrD4B,MAPf,WAEE,OACM,cAAC,EAAD,KCOOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f10db541.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({value,id, flipped, selected, handleClick}) => {\r\n\r\n    const returnSelected = () => {\r\n        handleClick([value,id])\r\n    }\r\n\r\n    return (\r\n        < >\r\n        {flipped ? \r\n        <div className=\"square-flipped squares\" >\r\n            <h3>{value}</h3>\r\n        </div> : \r\n        <div data-testid={\"btn\"} onClick={()=>returnSelected()} className={`square squares ${selected ? \"square-selected\" : ''}`} >\r\n            {selected ? \r\n            <h3>{value}</h3> : \r\n            <h2>?</h2>}\r\n        </div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Card from '../Card/Card';\r\nimport \"./Game.css\"; \r\n\r\nconst Game = () => {\r\n    const [currentlySelected, setCurrentlySelected] = useState([]);\r\n    const [flipped, setFlipped] = useState([]);\r\n    const [cards, setCards] = useState([]);\r\n\r\n    //INITAL CARD SETUP\r\n    const createCards= () => {\r\n        let cards = [];\r\n        for(let i=0;i<10;i++){\r\n            cards.push({value:i})\r\n        }\r\n        cards = [...cards, ...cards].sort(()=> Math.random() - 0.5);\r\n        setCards(cards)\r\n        return cards\r\n    }\r\n\r\n    useEffect(()=>{\r\n        createCards();\r\n    },[])\r\n\r\n    //CHECK IF SELECTED CARDS MATCH AND SET ACCORDING STATES\r\n    useEffect(()=>{\r\n        if(currentlySelected.length===2){\r\n            if(currentlySelected[0][0] === currentlySelected[1][0] && currentlySelected[0][1] !== currentlySelected[1][1]){\r\n                setFlipped([...flipped,currentlySelected[0][1],currentlySelected[1][1]])\r\n                setCurrentlySelected([]);\r\n                \r\n            } else {\r\n                setTimeout(() => {\r\n                    setCurrentlySelected([]);\r\n                }, 1000);\r\n            }\r\n            \r\n            \r\n        }\r\n    },[currentlySelected,flipped])\r\n\r\n    \r\n    //HANDLE VALUES FROM CHILD COMPONENT\r\n    const onClickHandler = (value) => {\r\n        !(currentlySelected.some(val=> {return val[1]===value[1]})) && currentlySelected.length<2 ? setCurrentlySelected([...currentlySelected, value]) : setCurrentlySelected(currentlySelected);\r\n    }\r\n\r\n    const restartGame = () => {\r\n        createCards();\r\n        setFlipped([]);\r\n        setCurrentlySelected([]);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n            <div className=\"card-container\">\r\n                {flipped.length===cards.length && cards.length!==0? \r\n                <div className=\"end-screen\">\r\n                <h1>Go again?</h1>\r\n                    <button onClick={()=>{restartGame()}}>Start</button>\r\n                </div>\r\n            : cards.map((card, id) => <Card value={card.value} key={id} id={id} data-testid=\"0\" handleClick={onClickHandler} selected={currentlySelected.some(val=> {return val[1]===id})} flipped={flipped.includes(id)} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n","import Game from './components/Game/Game';\n\nfunction App() {\n\n  return (\n        <Game/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}